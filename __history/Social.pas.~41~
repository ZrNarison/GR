unit Social;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, FMX.Graphics, FMX.Dialogs, System.Rtti,
  FMX.Grid.Style, FMX.DateTimeCtrls, FMX.ScrollBox, FMX.Grid, FMX.Objects,
  FMX.Edit, FMX.ListBox, FMX.StdCtrls, FMX.ComboEdit, FMX.Controls.Presentation,
  {$IFDEF MSWINDOWS}  // seulement pour Windows
       Vcl.Imaging.pngimage, Vcl.Imaging.jpeg,
    {$ENDIF}
     System.Math,Data.DB, // pour TField, TDataSet etc.
  FireDAC.Comp.Client;

type
  TForm7 = class(TForm)
    Panel1: TPanel;
    Label1: TLabel;
    ComboEdit1: TComboEdit;
    Label2: TLabel;
    Button3: TButton;
    Button2: TButton;
    Label3: TLabel;
    Label4: TLabel;
    Label7: TLabel;
    Label6: TLabel;
    Label8: TLabel;
    Label11: TLabel;
    ComboBox2: TComboBox;
    ComboEdit2: TComboEdit;
    Label5: TLabel;
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Edit5: TEdit;
    Edit6: TEdit;
    Edit7: TEdit;
    Image1: TImage;
    Button1: TButton;
    Label9: TLabel;
    GridPresence: TStringGrid;
    DateEdit1: TDateEdit;
    DateEdit2: TDateEdit;
    Label10: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Rectangle1: TRectangle;
    Rectangle2: TRectangle;
    Rectangle3: TRectangle;
    Label14: TLabel;
    Rectangle4: TRectangle;
    Button4: TButton;
    procedure FormCreate(Sender: TObject);
    procedure ComboEdit2Change(Sender: TObject);
    procedure GridPresenceDrawColumnCell(Sender: TObject; const Canvas: TCanvas;
  const Column: TColumn; const Bounds: TRectF; const Row: Integer; const Value: TValue;
  const State: TGridDrawStates);
    procedure Button2Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure ComboEdit1Change(Sender: TObject);
    procedure ComboBox2Change(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure DateEdit1Change(Sender: TObject);
    procedure Button4Click(Sender: TObject);
  private
    { Déclarations privées }
    StatusArray: array of array of string; // tableau pour stocker le statut
    procedure Initialisation;
    procedure DisableChamp;
    procedure VerficationChamp;
    procedure AjusterColonnes;
    procedure ChargerPresence;
    procedure FiltrerReunionsParDate;
  public
    { Déclarations publiques }
  end;

var
  Form7: TForm7;

implementation

{$R *.fmx}

uses base, Reunion, uSplash, System.UIConsts, Fiv, login, Membre, Rfiv, user;


procedure TForm7.FiltrerReunionsParDate;
var
  Q: TFDQuery;
  col: TColumn;
  idx: Integer;
begin
  // Nettoyer les colonnes existantes (sauf N° et NOM)
  while GridPresence.ColumnCount > 2 do
    GridPresence.RemoveObject(GridPresence.Columns[2]);

  // Charger les réunions à partir de la date sélectionnée
  Q := TFDQuery.Create(nil);
  try
    Q.Connection := DataModule1.FDConnection1;
    Q.SQL.Text :=
      'SELECT date_reunion FROM t_reunion ' +
      'WHERE date(date_reunion) >= date(:d) ' +
      'ORDER BY date_reunion ASC';
    Q.ParamByName('d').AsString := FormatDateTime('yyyy-mm-dd', DateEdit1.Date);
    Q.Open;

    idx := 2;
    while not Q.Eof do
    begin
      col := TColumn.Create(GridPresence);
      col.Header := FormatDateTime('dd/mm/yyyy', Q.FieldByName('date_reunion').AsDateTime);
      col.Width := 120;
      GridPresence.AddObject(col);
      Inc(idx);
      Q.Next;
    end;

  finally
    Q.Free;
  end;
end;


procedure TForm7.DateEdit1Change(Sender: TObject);

begin
    FiltrerReunionsParDate;
  GridPresence.Repaint; // rafraîchir le rendu graphique
end;


procedure TForm7.DisableChamp;
begin
   Edit1.Enabled:=false;
   Edit2.Enabled:=false;
   Edit3.Enabled:=false;
   Edit4.Enabled:=false;
   Edit5.Enabled:=false;
   Edit6.Enabled:=false;
end;
procedure TForm7.VerficationChamp;
var
  QMat: TFDQuery;
  dateReunion: TDate;
begin
  if Trim(ComboEdit2.Text) = '' then
  begin
    ComboEdit1.Items.Clear;
    Exit;
  end;

  // Conversion sécurisée du texte en TDate
  try
    dateReunion := StrToDate(ComboEdit2.Text);
  except
    on E: EConvertError do
    begin
      ShowMessage('La date de réunion n''est pas valide.');
      Exit;
    end;
  end;

  // Remplir ComboEdit1 uniquement avec les membres inscrits avant ou à la date de la réunion
  QMat := TFDQuery.Create(nil);
  try
    QMat.Connection := DataModule1.FDConnection1;
    QMat.SQL.Text :=
      'SELECT matricule ' +
      'FROM t_membre ' +
      'WHERE date_inscription <= :dateReu ' +
      'ORDER BY matricule';
    QMat.ParamByName('dateReu').AsDate := dateReunion;
    QMat.Open;

    ComboEdit1.Items.Clear;
    while not QMat.Eof do
    begin
      ComboEdit1.Items.Add(QMat.FieldByName('matricule').AsString);
      QMat.Next;
    end;
  finally
    QMat.Free;
  end;
end;

procedure TForm7.AjusterColonnes;
var
  i: Integer;
  ColWidth: Single;
begin
  if GridPresence.ColumnCount = 0 then Exit;
  ColWidth := GridPresence.Width / GridPresence.ColumnCount;
  for i := 0 to GridPresence.ColumnCount - 1 do
    GridPresence.Columns[i].Width := ColWidth;
end;

procedure TForm7.GridPresenceDrawColumnCell(Sender: TObject; const Canvas: TCanvas;
  const Column: TColumn; const Bounds: TRectF; const Row: Integer; const Value: TValue;
  const State: TGridDrawStates);
var
  colorCell: TAlphaColor;
  statut: string;
  sValue: string;
  QCheck: TFDQuery;
  dateInscription, dateReunion: TDate;
  nomMembre: string;
begin
  sValue := Value.ToString;

  // Ligne d’en-tête
  if Row = 0 then
  begin
    colorCell := TAlphaColorRec.Silver;
  end
  else
  begin
    // Récupération du statut (présent, absent, etc.)
    if (Column.Index < Length(StatusArray)) and (Row < Length(StatusArray[0])) then
      statut := StatusArray[Column.Index, Row]
    else
      statut := '';

    // Couleur par défaut selon le statut
    if statut = 'PRESENT' then
      colorCell := TAlphaColorRec.Lightgreen
    else if statut = 'EN RETARD' then
      colorCell := TAlphaColorRec.Yellow
    else if statut = 'ABSENT' then
      colorCell := TAlphaColorRec.Lightcoral
//    else if statut = '' then
//      colorCell := TAlphaColorRec.Black
      else
      colorCell := TAlphaColorRec.White;

    // Vérification de la date d’inscription du membre
    if (Column.Index > 1) then // éviter colonnes N° et NOM
    begin
      QCheck := TFDQuery.Create(nil);
      try
        QCheck.Connection := DataModule1.FDConnection1;

        // Chercher la date_inscription du membre courant
        nomMembre := GridPresence.Cells[1, Row];
        QCheck.SQL.Text :=
          'SELECT date_inscription FROM t_membre WHERE nom || " " || prenom = :np';
        QCheck.ParamByName('np').AsString := nomMembre;
        QCheck.Open;

        if not QCheck.IsEmpty then
          dateInscription := StrToDate(QCheck.FieldByName('date_inscription').AsString)
        else
          dateInscription := 0;

        // Récupérer la date de la réunion de cette colonne
        QCheck.Close;
        QCheck.SQL.Text :=
          'SELECT date_reunion FROM t_reunion ORDER BY date_reunion LIMIT 1 OFFSET :off';
        QCheck.ParamByName('off').AsInteger := Column.Index - 2;
        QCheck.Open;

        if not QCheck.IsEmpty then
//          dateReunion := QCheck.FieldByName('date_reunion').AsDateTime
          dateReunion := StrToDate(QCheck.FieldByName('date_reunion').AsString)
        else
          dateReunion := 0;

//          Pour que le membre est inscrit aprés la date du réunion
        if (dateInscription > dateReunion) and (dateReunion <> 0) then
      colorCell := TAlphaColorRec.Black;

      finally
        QCheck.Free;
      end;
    end;
  end;

  // Dessin final de la cellule
  Canvas.Fill.Color := colorCell;
  Canvas.FillRect(Bounds, 0, 0, [], 1);

  // Texte blanc si fond noir
  if colorCell = TAlphaColorRec.Black then
    Canvas.Fill.Color := TAlphaColorRec.White
  else
    Canvas.Fill.Color := TAlphaColorRec.Black;

  Canvas.FillText(Bounds, sValue, False, 1, [], TTextAlign.Center, TTextAlign.Center);
end;


procedure TForm7.Button1Click(Sender: TObject);
begin
  if not Assigned(Form6) then
    Form6 := TForm6.Create(Self);
  Form6.Left := Form7.Left;
  Form6.Top := Form7.Top;
  Form6.Width := Form7.Width;
  Form6.Height := Form7.Height;
  Form6.Show;
  Form7.Hide;
end;

procedure TForm7.Button2Click(Sender: TObject);
var
  Remarque: string;
  ValAjouter: Double;
  IdMembre, newReunionId: Integer;
  QDates, QMat,QInsert, QCheck: TFDQuery;
  MatText, ValeurTexte: string;
  FS: TFormatSettings;
begin
  // 1) Date réunion
  if Trim(ComboEdit2.Text) = '' then
  begin
    ShowMessage('Veuillez sélectionner une date de réunion.');
    Exit;
  end;

  // 2) Matricule texte
  MatText := Trim(ComboEdit1.Text);
  if MatText = '' then
  begin
    ShowMessage('Veuillez saisir ou choisir un matricule.');
    Exit;
  end;

  // si "01 - NOM ..." garder juste la partie matricule
  if Pos('-', MatText) > 0 then
    MatText := Trim(Copy(MatText, 1, Pos('-', MatText) - 1));

  // 3) Récupérer id membre depuis matricule (requête locale)
  QCheck := TFDQuery.Create(nil);
  try
    QCheck.Connection := DataModule1.FDConnection1;
    QCheck.SQL.Text := 'SELECT id FROM t_membre WHERE matricule = :mat';
    QCheck.ParamByName('mat').AsString := MatText;
    QCheck.Open;
    if QCheck.Eof then
    begin
      ShowMessage('Matricule introuvable dans la base : ' + MatText);
      Exit;
    end;
    IdMembre := QCheck.FieldByName('id').AsInteger;
    QCheck.Close;
  finally
    QCheck.Free;
  end;

  // 4) Récupérer id réunion
  QCheck := TFDQuery.Create(nil);
  try
    QCheck.Connection := DataModule1.FDConnection1;
    QCheck.SQL.Text := 'SELECT id FROM t_reunion WHERE date_reunion = :d';
    QCheck.ParamByName('d').AsString := ComboEdit2.Text;
    QCheck.Open;
    if QCheck.Eof then
    begin
      ShowMessage('Aucune réunion trouvée pour cette date.');
      Exit;
    end;
    newReunionId := QCheck.FieldByName('id').AsInteger;
    QCheck.Close;
  finally
    QCheck.Free;
  end;

  // 5) Statut
  if ComboBox2.ItemIndex = -1 then
  begin
    ShowMessage('Veuillez sélectionner une rémarque .');
    ComboBox2.SetFocus;
    Exit;
  end;
  Remarque := UpperCase(Trim(ComboBox2.Text));

  // 6) Valeur (Edit7)
     ValeurTexte := Trim(Edit7.Text);

    // Vérifier si vide
    if ValeurTexte = '' then
    begin
      ShowMessage('Veuillez saisir une valeur numérique dans valeur ajouté.');
      edit7.Text:='';
      Edit7.SetFocus;
      Exit;
    end;

    // Vérifier que ce n'est que des chiffres ou un nombre avec virgule/point et aprés on convertier en Chiffre
    FS := TFormatSettings.Create;
    FS.DecimalSeparator := '.'; // standard point pour base
    ValeurTexte := StringReplace(ValeurTexte, ',', '.', [rfReplaceAll]);

    if not TryStrToFloat(ValeurTexte, ValAjouter, FS) then
    begin
      ShowMessage('La valeur saisie est invalide : ' + Edit7.Text);
      Edit7.SetFocus;
      edit7.Text:='';
      Exit;
    end;

// Try parsing robustement : d'abord selon la locale, sinon remplacer virgule par point
  if not TryStrToFloat(ValeurTexte, ValAjouter) then
  begin
    // essayer avec remplacement virgule->point et FormatSettings decimal '.'
    ValeurTexte := StringReplace(ValeurTexte, ',', '.', [rfReplaceAll, rfIgnoreCase]);
    FS := TFormatSettings.Create;
    FS.DecimalSeparator := '.';
    if not TryStrToFloat(ValeurTexte, ValAjouter, FS) then
    begin
      ShowMessage('La valeur saisie est invalide : ' + Edit7.Text);
      Exit;
    end;
  end;

  // 7) Vérifier existence
  QCheck := TFDQuery.Create(nil);
  try
    QCheck.Connection := DataModule1.FDConnection1;
    QCheck.SQL.Text := 'SELECT id FROM t_social WHERE idMembre = :m AND idReunion = :r';
    QCheck.ParamByName('m').AsInteger := IdMembre;
    QCheck.ParamByName('r').AsInteger := newReunionId;
    QCheck.Open;
    if not QCheck.Eof then
    begin
      ShowMessage('Social déjà enregistrée pour ce membre.');
      Exit;
    end;
  finally
    QCheck.Free;
  end;


        // 9)Insertion dans la table t_presence
        QInsert := TFDQuery.Create(nil);
        try
          QInsert.Connection := DataModule1.FDConnection1;
          QInsert.SQL.Text :=
            'INSERT INTO t_social (idMembre, idReunion, remarque, valeur) ' +
            'VALUES (:m, :r, :rem, :val)';
          QInsert.ParamByName('m').AsInteger := IdMembre;
          QInsert.ParamByName('r').AsInteger := newReunionId;
          QInsert.ParamByName('rem').AsString := Remarque;
          QInsert.ParamByName('val').AsString := Edit7.Text;
          QInsert.ExecSQL;
        finally
          QInsert.Free;
        end;

        // Réinitialiser les champs
        ComboEdit1.Text := '';
        ComboEdit2.Text := '';
        ComboBox2.ItemIndex := -1;
        Edit7.Text := '';
        Edit7.Enabled:=true;

        // Recharger les données
        Initialisation;
        ChargerPresence;

        // Recharger les dates dans ComboEdit2
        QDates := TFDQuery.Create(nil);
        try
          QDates.Connection := DataModule1.FDConnection1;
          QDates.SQL.Text := 'SELECT date_reunion FROM t_reunion ORDER BY date_reunion ASC';
          QDates.Open;

          ComboEdit2.Items.Clear;
          while not QDates.Eof do
          begin
            ComboEdit2.Items.Add(QDates.FieldByName('date_reunion').AsString);
            QDates.Next;
          end;
        finally
          QDates.Free;
        end;
//        ShowMessage('Socal enregistrée avec succès.');

end;


procedure TForm7.Button4Click(Sender: TObject);
var
  QDel, QCheck: TFDQuery;
  idMembre, idReunion: Integer;
  nomPrenom, dateReunion: string;
  ColIndex, RowIndex: Integer;
begin
  // Vérifier qu'une cellule est sélectionnée
  ColIndex := GridPresence.Col;
  RowIndex := GridPresence.Row;

  if (RowIndex < 0) or (ColIndex < 0) then
  begin
    ShowMessage('Veuillez sélectionner une cellule ou une ligne à supprimer.');
    Exit;
  end;

  // Empêcher suppression de l’en-tête
  if RowIndex = 0 then
  begin
    ShowMessage('Impossible de supprimer une ligne d’en-tête.');
    Exit;
  end;

  // On ne supprime que si ce n’est pas les deux premières colonnes (N°, NOM)
  if ColIndex < 2 then
  begin
    ShowMessage('Veuillez sélectionner une colonne correspondant à une réunion.');
    Exit;
  end;

  // Récupérer les informations du membre et de la réunion
  nomPrenom := Trim(GridPresence.Cells[1, RowIndex]); // Nom + Prénom
  dateReunion := GridPresence.Columns[ColIndex].Header;

  // Nettoyer le texte du header si nécessaire (ex: "Réunion (2024-10-20)")
  if Pos('(', dateReunion) > 0 then
  begin
    dateReunion := Copy(dateReunion, Pos('(', dateReunion) + 1, Length(dateReunion));
    dateReunion := StringReplace(dateReunion, ')', '', []);
  end;

  QCheck := TFDQuery.Create(nil);
  QDel := TFDQuery.Create(nil);
  try
    QCheck.Connection := DataModule1.FDConnection1;
    QDel.Connection := DataModule1.FDConnection1;

    // Trouver idMembre depuis le nom complet
    QCheck.SQL.Text := 'SELECT id FROM t_membre WHERE (nom || " " || prenom) = :np';
    QCheck.ParamByName('np').AsString := nomPrenom;
    QCheck.Open;

    if QCheck.IsEmpty then
    begin
      ShowMessage('Membre introuvable dans la base.');
      Exit;
    end;

    idMembre := QCheck.FieldByName('id').AsInteger;
    QCheck.Close;

    // Trouver idReunion depuis la date
    QCheck.SQL.Text := 'SELECT id FROM t_reunion WHERE date_reunion = :dr';
    QCheck.ParamByName('dr').AsString := dateReunion;
    QCheck.Open;

    if QCheck.IsEmpty then
    begin
      ShowMessage('Réunion introuvable dans la base.');
      Exit;
    end;

    idReunion := QCheck.FieldByName('id').AsInteger;
    QCheck.Close;

    // Supprimer dans t_social
    QDel.SQL.Text := 'DELETE FROM t_social WHERE idMembre = :idm AND idReunion = :idr';
    QDel.ParamByName('idm').AsInteger := idMembre;
    QDel.ParamByName('idr').AsInteger := idReunion;
    QDel.ExecSQL;

    ShowMessage('Le social sélectionnée a été supprimée avec succès.');

    // Rafraîchir la grille
    ChargerPresence;

  finally
    QCheck.Free;
    QDel.Free;
  end;
end;



procedure TForm7.ChargerPresence;
var
  QReu, QMem, QPres: TFDQuery;
  iCol, r: Integer;
  idReunion, idMembre: Integer;
  nbReu: Integer;
  statut, dateStr: string;
  valeur: Double;
  Col: TStringColumn;
  nCols, nRows: Integer;
begin
  QReu := TFDQuery.Create(nil);
  QMem := TFDQuery.Create(nil);
  QPres := TFDQuery.Create(nil);
  try
    QReu.Connection := DataModule1.FDConnection1;
    QMem.Connection := DataModule1.FDConnection1;
    QPres.Connection := DataModule1.FDConnection1;

    QReu.SQL.Text := 'SELECT id, date_reunion FROM t_reunion ORDER BY date_reunion';
    QReu.Open;

    QMem.SQL.Text := 'SELECT id, matricule, nom, prenom FROM t_membre ORDER BY nom';
    QMem.Open;

    nCols := 2 + QReu.RecordCount;
    nRows := QMem.RecordCount + 1;

    GridPresence.BeginUpdate;
    try
      // Supprimer les colonnes existantes
      while GridPresence.ColumnCount > 0 do
        GridPresence.RemoveObject(GridPresence.Columns[0]);

      // Colonnes fixes
      Col := TStringColumn.Create(GridPresence);
      Col.Header := 'N°';
      GridPresence.AddObject(Col);

      Col := TStringColumn.Create(GridPresence);
      Col.Header := 'NOM et PRENOMS';
      GridPresence.AddObject(Col);

      // Colonnes pour chaque réunion
      QReu.First; nbReu := 1;
      while not QReu.Eof do
      begin
        Col := TStringColumn.Create(GridPresence);
        dateStr := QReu.FieldByName('date_reunion').AsString;
        Col.Header := 'R' + IntToStr(nbReu) + ' (' + dateStr + ')';
        GridPresence.AddObject(Col);
        Inc(nbReu);
        QReu.Next;
      end;

      GridPresence.RowCount := nRows;
      SetLength(StatusArray, GridPresence.ColumnCount, GridPresence.RowCount);

      // En-têtes
      GridPresence.Cells[0,0] := 'N°';
      GridPresence.Cells[1,0] := 'NOM et PRENOMS';
      QReu.First; iCol := 2; nbReu := 1;
      while not QReu.Eof do
      begin
        GridPresence.Cells[iCol,0] := 'R' + IntToStr(nbReu);
        StatusArray[iCol,0] := '';
        Inc(iCol); Inc(nbReu); QReu.Next;
      end;

      // Remplissage des lignes membres
      r := 1;
      QMem.First;
      while not QMem.Eof do
      begin
        GridPresence.Cells[0,r] := FormatFloat('00', r);
        GridPresence.Cells[1,r] := QMem.FieldByName('nom').AsString + ' ' + QMem.FieldByName('prenom').AsString;

        QReu.First; iCol := 2;
        while not QReu.Eof do
        begin
          idMembre := QMem.FieldByName('id').AsInteger;
          idReunion := QReu.FieldByName('id').AsInteger;

          QPres.Close;
          QPres.SQL.Text := 'SELECT valeur, remarque FROM t_social WHERE idMembre = :idm AND idReunion = :idr';
          QPres.ParamByName('idm').AsInteger := idMembre;
          QPres.ParamByName('idr').AsInteger := idReunion;
          QPres.Open;

          if not QPres.IsEmpty then
          begin
            statut := UpperCase(Trim(QPres.FieldByName('remarque').AsString));
            if not VarIsNull(QPres.FieldByName('valeur').Value) then
              valeur := QPres.FieldByName('valeur').AsFloat
            else
              valeur := 0;

            GridPresence.Cells[iCol,r] := FloatToStrF(valeur, ffFixed, 8, 2);
            StatusArray[iCol,r] := statut;
          end
          else
          begin
            GridPresence.Cells[iCol,r] := '';
            StatusArray[iCol,r] := 'ABSENT';
          end;

          Inc(iCol);
          QReu.Next;
        end;

        Inc(r);
        QMem.Next;
      end;

    finally
      GridPresence.EndUpdate;
    end;

  finally
    QReu.Free;
    QMem.Free;
    QPres.Free;
  end;

  GridPresence.Repaint;
end;

procedure TForm7.ComboBox2Change(Sender: TObject);
begin
  Edit7.Text:='1000';
  Edit7.Enabled:=false;
end;

procedure TForm7.ComboEdit1Change(Sender: TObject);
var
  codeMat, cheminImage: string;
  Qm: TFDQuery;
begin
  codeMat := Trim(ComboEdit1.Text);
  if codeMat = '' then
  begin
    // si tu veux alerter ici, tu peux; mais on ne quitte pas l'affichage des champs,
    // on attend que l'utilisateur choisisse un matricule
    Exit;
  end;

  // Afficher les contrôles de détail
  Label2.Visible := True; Edit1.Visible := True;
  Label3.Visible := True; Edit2.Visible := True;
  Label4.Visible := True; Edit3.Visible := True;
  Label5.Visible := True; Edit4.Visible := True;
  Label6.Visible := True; Edit5.Visible := True;
  Label7.Visible := True; Edit6.Visible := True;
  Label8.Visible := True; ComboBox2.Visible := True;
  Label9.Visible := True; Edit7.Visible := True;
  DisableChamp;

  if Pos('-', codeMat) > 0 then
    codeMat := Trim(Copy(codeMat, 1, Pos('-', codeMat) - 1));

  Qm := TFDQuery.Create(nil);
  try
    Qm.Connection := DataModule1.FDConnection1;
    Qm.SQL.Text := 'SELECT nom, prenom, date_naissance, lieu_naissance, adresse, cin, image ' +
                   'FROM t_membre WHERE matricule = :Matricule';
    Qm.ParamByName('Matricule').AsString := codeMat;
    Qm.Open;
    if not Qm.Eof then
    begin
      Edit1.Text := Qm.FieldByName('nom').AsString;
      Edit2.Text := Qm.FieldByName('prenom').AsString;
      Edit3.Text := Qm.FieldByName('date_naissance').AsString;
      Edit4.Text := Qm.FieldByName('lieu_naissance').AsString;
      Edit5.Text := Qm.FieldByName('adresse').AsString;
      Edit6.Text := Qm.FieldByName('cin').AsString;

      cheminImage := Qm.FieldByName('image').AsString;
      if FileExists(cheminImage) then
        Image1.Bitmap.LoadFromFile(cheminImage)
      else
        Image1.Bitmap := nil;
    end
    else
      ShowMessage('Aucun membre trouvé pour ce matricule : ' + codeMat);
  finally
    Qm.Free;
  end;
end;

procedure TForm7.ComboEdit2Change(Sender: TObject);
begin
  VerficationChamp;
  ChargerPresence;
end;

procedure TForm7.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  if not Assigned(Form1) then
    Form1 := TForm1.Create(Self);
  Form1.Left := Form7.Left;
  Form1.Top := Form7.Top;
  Form1.Width := Form7.Width;
  Form1.Height := Form7.Height;
  Form1.Show;
  Form7.Hide;
end;

procedure TForm7.FormCreate(Sender: TObject);
begin
  Initialisation;
end;

procedure TForm7.FormShow(Sender: TObject);
var
  QDates, QMat: TFDQuery;
begin
  Caption := 'GESTION DE GROUPE (Social)';
  VerficationChamp;
    GridPresence.OnDrawColumnCell := GridPresenceDrawColumnCell;
//    Legende du tableu
    Rectangle1.Fill.Color := TAlphaColorRec.Red;
    Rectangle2.Fill.Color := TAlphaColorRec.Yellow;
    Rectangle3.Fill.Color := TAlphaColorRec.Green;
    Rectangle4.Fill.Color := TAlphaColorRec.black;
    Edit7.Enabled:=true;
  // Remplir ComboEdit2 (dates des réunions)
  QDates := TFDQuery.Create(nil);
  try
    QDates.Connection := DataModule1.FDConnection1;
    QDates.SQL.Text := 'SELECT date_reunion FROM t_reunion ORDER BY date_reunion ASC';
    QDates.Open;
    ComboEdit2.Items.Clear;
    while not QDates.Eof do
    begin
      ComboEdit2.Items.Add(QDates.FieldByName('date_reunion').AsString);
      QDates.Next;
    end;
  finally
    QDates.Free;
  end;
  ChargerPresence;
  ComboEdit2.SetFocus;

end;

procedure TForm7.Initialisation;
begin
  Label2.Visible := False; Edit1.Text := ''; Edit1.Visible := False;
  Label3.Visible := False; Edit2.Text := ''; Edit2.Visible := False;
  Label4.Visible := False; Edit3.Text := ''; Edit3.Visible := False;
  Label5.Visible := False; Edit4.Text := ''; Edit4.Visible := False;
  Label6.Visible := False; Edit5.Text := ''; Edit5.Visible := False;
  Label7.Visible := False; Edit6.Text := ''; Edit6.Visible := False;
  Label8.Visible := False; ComboBox2.Visible := False;
  Label9.Visible := False; Edit7.Text := ''; Edit7.Visible := False;
  Image1.Bitmap := nil;
  DateEdit1.IsEmpty:=true;
  DateEdit2.IsEmpty:=true;
  // Réinitialiser les champs
  ComboEdit1.Clear;
  ComboEdit2.Clear;
  ComboBox2.ItemIndex := -1;

  // Préparer la grille (on garde la grille vide)
  GridPresence.ClearColumns;
  GridPresence.RowCount := 0;
end;

end.
