unit Membre;

interface

uses
  System.SysUtils, System.Types, System.UITypes, System.Classes, System.Variants,
  FMX.Types, FMX.Controls, FMX.Forms, Winapi.Windows, FMX.Graphics, FMX.Platform,
  FMX.StdCtrls, FMX.Controls.Presentation, FMX.Edit, FMX.DateTimeCtrls,
  FMX.Objects, Data.DB, FireDAC.Comp.Client, System.IOUtils,
  FMX.ScrollBox, FMX.ListBox, System.DateUtils, FMX.ListView.Types,
  FMX.ListView.Appearances, FMX.ListView, FMX.ListView.Adapters.Base,
  System.Rtti, FMX.Grid.Style, FMX.Grid, FMX.DialogService, System.RegularExpressions,
  FireDAC.Stan.Param, FMX.Dialogs,DelphiZXingQRCode;

type
  TForm2 = class(TForm)
    Edit1: TEdit; // Nom
    Edit2: TEdit; // Prénom
    Edit3: TEdit; // Lieu naissance
    Edit6: TEdit; // Père
    Edit7: TEdit; // Mère
    Edit8: TEdit; // CIN
    Edit9: TEdit; // Adresse
    Edit10: TEdit; // Email
    Edit11: TEdit; // Contact
    ComboBox1: TComboBox; // Sexe
    DateEdit1: TDateEdit; // Date de naissance
    Button1: TButton; // Choisir image
    Button2: TButton; // Enregistrer / Modifier
    Button3: TButton; // Nouveau
    Button4: TButton; // Supprimer
    Image1: TImage;
    StringGrid1: TStringGrid;
    OpenDialog1: TOpenDialog;
    Edit4: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Button2Click(Sender: TObject);
    procedure Button3Click(Sender: TObject);
    procedure Button4Click(Sender: TObject);
    procedure ListView1ItemClick(const Sender: TObject; const AItem: TListViewItem);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure StringGrid1CellClick(const Column: TColumn; const Row: Integer);
    procedure Edit4Change(Sender: TObject);
  private
    SelectedID: Integer;
    procedure ChargerStringGrid1;
    procedure Vidage;
    procedure GenererBadge(const CIN: string; const Matricule: Integer);
    procedure CarteGenererBadgeDoubleFace(const CIN: string; const Matricule: Integer;
  const Nom, Prenom, Sexe, Adresse, Email, PhotoPath: string);
    procedure ShowSplash;
  public
  end;

var
  Form2: TForm2;

implementation

{$R *.fmx}

uses base, Fiv, Reunion, Rfiv, uSplash;

procedure TForm2.Vidage;
begin
  Edit1.Text := '';
  Edit2.Text := '';
  Edit3.Text := '';
  Edit6.Text := '';
  Edit7.Text := '';
  Edit8.Text := '';
  Edit9.Text := '';
  Edit10.Text := '';
  Edit11.Text := '';
  DateEdit1.IsEmpty := True;
  ComboBox1.ItemIndex := -1;
  Image1.Bitmap.Assign(nil);
  Button2.Text := 'Enregistrer';
  SelectedID := 0;
end;

procedure TForm2.FormCreate(Sender: TObject);
begin
  Vidage;
end;

procedure TForm2.FormShow(Sender: TObject);
begin
  Caption := 'GESTION DE GROUPE (Membres)';
  ChargerStringGrid1;
end;

procedure TForm2.ChargerStringGrid1;
var
  Ligne, Age: Integer;
  DateNaissance: TDate;
  DateStr, NomComplet: string;
  FS: TFormatSettings;
  Col: TStringColumn;
  ColHeaders: array[0..10] of string;
begin
  FS := TFormatSettings.Create;
  FS.DateSeparator := '-';
  FS.ShortDateFormat := 'yyyy-MM-dd';

  ColHeaders[0] := 'N°';
  ColHeaders[1] := 'Nom complet';
  ColHeaders[2] := 'Âge';
  ColHeaders[3] := 'Téléphone';
  ColHeaders[4] := 'Filiation';
  ColHeaders[5] := 'CIN';
  ColHeaders[6] := 'Sexe';
  ColHeaders[7] := 'Adresse';
  ColHeaders[8] := 'Email';
  ColHeaders[9] := 'Téléphone';
  ColHeaders[10] := 'Inscription';

  StringGrid1.BeginUpdate;
  try
    StringGrid1.ClearColumns;
    StringGrid1.RowCount := 1; // il faut au moins 1 ligne pour éviter hors limites

    // Création des colonnes
    for Ligne := 0 to High(ColHeaders) do
    begin
      Col := TStringColumn.Create(StringGrid1);
      Col.Header := ColHeaders[Ligne];
      StringGrid1.AddObject(Col);
    end;

    // Lecture de la base
    with DataModule1.FDQuery1 do
    begin
      Connection := DataModule1.FDConnection1;
      SQL.Text :=
        'SELECT matricule, nom, prenom, date_naissance, filiation_pere, filiation_mere, ' +
        'cin, sexe, adresse, email, telephone, date_inscription ' +
        'FROM t_membre ORDER BY matricule ASC';
      Open;
      Ligne := 0;
      while not Eof do
      begin
        StringGrid1.RowCount := Ligne + 2; // ajouter une ligne
        NomComplet := FieldByName('nom').AsString + ' ' + FieldByName('prenom').AsString;
        StringGrid1.Cells[0,Ligne] := FieldByName('matricule').AsString;
        StringGrid1.Cells[1,Ligne] := NomComplet;

        DateStr := FieldByName('date_naissance').AsString;
        if DateStr <> '' then
          DateNaissance := StrToDate(DateStr, FS)
        else
          DateNaissance := 0;
        Age := YearsBetween(Now, DateNaissance);
        StringGrid1.Cells[2,Ligne] := IntToStr(Age) + ' ans';

        StringGrid1.Cells[3,Ligne] := FieldByName('telephone').AsString;
        StringGrid1.Cells[4,Ligne] := FieldByName('filiation_pere').AsString + '/' + FieldByName('filiation_mere').AsString;
        StringGrid1.Cells[5,Ligne] := FieldByName('cin').AsString;
        StringGrid1.Cells[6,Ligne] := FieldByName('sexe').AsString;
        StringGrid1.Cells[7,Ligne] := FieldByName('adresse').AsString;
        StringGrid1.Cells[8,Ligne] := FieldByName('email').AsString;
        StringGrid1.Cells[9,Ligne] := FieldByName('telephone').AsString;
        StringGrid1.Cells[10,Ligne] := FieldByName('date_inscription').AsString;

        Inc(Ligne);
        Next;
      end;
      Close;
    end;

  finally
    StringGrid1.EndUpdate;
  end;
end;


procedure TForm2.Edit4Change(Sender: TObject);
var
  TexteRecherche: string;
begin
  TexteRecherche := Trim(Edit4.Text);

  // Si la zone est vide → recharger tous les membres
  if TexteRecherche = '' then
  begin
    ChargerStringGrid1;
    Exit;
  end;

  with DataModule1.FDQuery1 do
  begin
    Close;
    SQL.Clear;
    SQL.Add('SELECT matricule, nom, prenom, sexe, adresse, email');
    SQL.Add('FROM t_membre');
    SQL.Add('WHERE nom LIKE :rech OR prenom LIKE :rech');
    SQL.Add('ORDER BY nom, prenom');
    ParamByName('rech').AsString := '%' + TexteRecherche + '%';
    Open;
  end;

  // Actualiser l’affichage du StringGrid
  StringGrid1.RowCount := 1; // Garde la ligne d’en-tête
  while not DataModule1.FDQuery1.Eof do
  begin
    StringGrid1.RowCount := StringGrid1.RowCount + 1;
    StringGrid1.Cells[0, StringGrid1.RowCount - 1] := DataModule1.FDQuery1.FieldByName('matricule').AsString;
    StringGrid1.Cells[1, StringGrid1.RowCount - 1] := DataModule1.FDQuery1.FieldByName('nom').AsString;
    StringGrid1.Cells[2, StringGrid1.RowCount - 1] := DataModule1.FDQuery1.FieldByName('prenom').AsString;
    StringGrid1.Cells[3, StringGrid1.RowCount - 1] := DataModule1.FDQuery1.FieldByName('sexe').AsString;
    StringGrid1.Cells[4, StringGrid1.RowCount - 1] := DataModule1.FDQuery1.FieldByName('adresse').AsString;
    StringGrid1.Cells[5, StringGrid1.RowCount - 1] := DataModule1.FDQuery1.FieldByName('email').AsString;
    DataModule1.FDQuery1.Next;
  end;

  DataModule1.FDQuery1.Close;
end;

procedure TForm2.Button1Click(Sender: TObject);
begin
  if OpenDialog1.Execute then
    Image1.Bitmap.LoadFromFile(OpenDialog1.FileName);
end;

procedure TForm2.GenererBadge(const CIN: string; const Matricule: Integer);
var
  QRCode: TDelphiZXingQRCode;
  Bitmap: TBitmap;
  x, y: Integer;
  Scale: Single;
  OutputFile,ImageQR: string;
begin
  QRCode := TDelphiZXingQRCode.Create;
  Bitmap := TBitmap.Create;
  try
    QRCode.Data := CIN;
    QRCode.QuietZone := 4;

    Scale := 8.0;
    Bitmap.SetSize(Round(QRCode.Columns * Scale), Round(QRCode.Rows * Scale));

    if Bitmap.Canvas.BeginScene then
    try
      for y := 0 to QRCode.Rows - 1 do
      begin
        for x := 0 to QRCode.Columns - 1 do
        begin
          if QRCode.IsBlack[x, y] then
            Bitmap.Canvas.Fill.Color := TAlphaColors.Black
          else
            Bitmap.Canvas.Fill.Color := TAlphaColors.White;

          Bitmap.Canvas.FillRect(
            TRectF.Create(x*Scale, y*Scale, (x+1)*Scale, (y+1)*Scale),
            0, 0, AllCorners,
            1.0,
            Bitmap.Canvas.Fill
          );
        end;
      end;
    finally
      Bitmap.Canvas.EndScene;
    end;

    ImageQR := TPath.Combine(ExtractFilePath(ParamStr(0)), 'imgQR');
  if not DirectoryExists(ImageQR) then
    CreateDir(ImageQR);

    OutputFile := TPath.Combine(ImageQR, Format('BadgeMembre_%d.png', [Matricule]));
    Bitmap.SaveToFile(OutputFile);
  finally
    QRCode.Free;
    Bitmap.Free;
  end;
end;

//--------------------Pour le chargememnt---------------------------------//

procedure TForm2.ShowSplash;
var
  Splash: TFormSplash;
  i: Integer;
begin
  Splash := TFormSplash.Create(nil);
  try
    Splash.Show;
    for i := 1 to 100 do
    begin
      Splash.UpdateProgress(i, Format('Chargement %d%%...', [i]));
      Application.ProcessMessages;
//      TThread.Sleep(10); // courte pause
    end;

  finally
    Splash.Close;
    Splash.Free;
  end;
end;

//---------------------Généré un Badge avec un codeQR-----------------------------------//
procedure TForm2.CarteGenererBadgeDoubleFace(const CIN: string; const Matricule: Integer;
  const Nom, Prenom, Sexe, Adresse, Email, PhotoPath: string);
var
  Recto, Verso, PhotoBmp, LogoBmp: TBitmap;
  QRCode: TDelphiZXingQRCode;
  x, y: Integer;
  Scale, QRX, QRY, QRSize: Single;
  OutputFileRecto, OutputFileVerso: string;
  CardWidth, CardHeight: Integer;
  GroupeNom, GroupeAdresse, GroupePhoto, GroupePresident: string;
  Q: TFDQuery;
  SaveDialog: TSaveDialog;
begin
  ShowSplash;

  // Taille standard d’une carte (CR80)
  CardWidth := 952;   // ~10 cm @ 96 DPI
  CardHeight := 600;  // ~6,3 cm

  // === Charger infos du groupe ===
  Q := TFDQuery.Create(nil);
  try
    Q.Connection := DataModule1.FDConnection1;
    Q.SQL.Text := 'SELECT nomSetting, adresseSetting, photoSetting, presidentSetting FROM t_groupe LIMIT 1';
    Q.Open;
    if not Q.IsEmpty then
    begin
      GroupeNom := Q.FieldByName('nomSetting').AsString;
      GroupeAdresse := Q.FieldByName('adresseSetting').AsString;
      GroupePhoto := Q.FieldByName('photoSetting').AsString;
      GroupePresident := Q.FieldByName('presidentSetting').AsString;
    end;
  finally
    Q.Free;
  end;

  // === RECTO ===
  Recto := TBitmap.Create;
  try
    Recto.SetSize(CardWidth, CardHeight);
    Recto.Canvas.BeginScene;
    try
      // Fond blanc
      Recto.Canvas.Clear(TAlphaColorRec.White);

      // Bande bleue supérieure
      Recto.Canvas.Fill.Color := TAlphaColorRec.Navy;
      Recto.Canvas.FillRect(TRectF.Create(0, 0, CardWidth, 120), 0, 0, AllCorners, 1);

      // Logo du groupe à gauche
      if FileExists(GroupePhoto) then
      begin
        LogoBmp := TBitmap.Create;
        try
          LogoBmp.LoadFromFile(GroupePhoto);
          Recto.Canvas.DrawBitmap(LogoBmp,
            RectF(0, 0, LogoBmp.Width, LogoBmp.Height),
            RectF(20, 15, 120, 110), 1, True);
        finally
          LogoBmp.Free;
        end;
      end;

      // --- Texte sur la bande bleue ---
      // Titre de la carte
      Recto.Canvas.Fill.Color := TAlphaColorRec.White;
      Recto.Canvas.Font.Size := 30;
      Recto.Canvas.FillText(TRectF.Create(0, 20, CardWidth, 60),
        'CARTE D''IDENTIFICATION MEMBRE', False, 1, [], TTextAlign.Center, TTextAlign.Center);

      // Nom du groupe juste en dessous du titre
      Recto.Canvas.Font.Size := 18;
      Recto.Canvas.FillText(TRectF.Create(0, 65, CardWidth, 95),
        GroupeNom, False, 1, [], TTextAlign.Center, TTextAlign.Center);

      // --- Photo du membre à gauche ---
      if FileExists(PhotoPath) then
      begin
        PhotoBmp := TBitmap.Create;
        try
          PhotoBmp.LoadFromFile(PhotoPath);
          Recto.Canvas.DrawBitmap(PhotoBmp,
            RectF(0, 0, PhotoBmp.Width, PhotoBmp.Height),
            RectF(50, 190, 330, CardHeight - 80), 1, True);
        finally
          PhotoBmp.Free;
        end;
      end
      else
      begin
        Recto.Canvas.Fill.Color := TAlphaColorRec.Lightgray;
        Recto.Canvas.FillRect(TRectF.Create(50, 190, 330, CardHeight - 80), 8, 8, AllCorners, 1);
        Recto.Canvas.Fill.Color := TAlphaColorRec.Black;
        Recto.Canvas.Font.Size := 20;
        Recto.Canvas.FillText(TRectF.Create(50, 270, 330, 400),
          'PHOTO', False, 1, [], TTextAlign.Center, TTextAlign.Center);
      end;

      // --- Infos membre à droite ---
      Recto.Canvas.Fill.Color := TAlphaColorRec.Black;
      Recto.Canvas.Font.Size := 28;
      Recto.Canvas.FillText(TRectF.Create(360, 190, CardWidth - 50, CardHeight - 130),
        Format('Matricule : %d' + sLineBreak +
               'Nom : %s' + sLineBreak +
               'Prénom : %s' + sLineBreak +
               'Sexe : %s' + sLineBreak +
               'Adresse : %s' + sLineBreak +
               'Email : %s',
          [Matricule, UpperCase(Nom), Prenom, Sexe, Adresse, Email]),
        False, 1, [], TTextAlign.Leading, TTextAlign.Leading);

      // --- QR Code à 1 mm du bord droit et CIN en dessous ---
      QRCode := TDelphiZXingQRCode.Create;
      try
        QRCode.Data := CIN;
        QRCode.QuietZone := 2;
        Scale := 6.0;
        QRSize := QRCode.Columns * Scale;
        QRX := CardWidth - QRSize - 10; // 1 mm du bord
        QRY := CardHeight - QRSize - 50;

        for y := 0 to QRCode.Rows - 1 do
          for x := 0 to QRCode.Columns - 1 do
          begin
            if QRCode.IsBlack[x, y] then
              Recto.Canvas.Fill.Color := TAlphaColorRec.Black
            else
              Recto.Canvas.Fill.Color := TAlphaColorRec.White;

            Recto.Canvas.FillRect(
              TRectF.Create(QRX + x * Scale, QRY + y * Scale,
                            QRX + (x + 1) * Scale, QRY + (y + 1) * Scale),
              0, 0, AllCorners, 1);
          end;

        // CIN sous le QR Code
        Recto.Canvas.Font.Size := 20;
        Recto.Canvas.Fill.Color := TAlphaColorRec.Black;
        Recto.Canvas.FillText(TRectF.Create(QRX, CardHeight - 40, QRX + QRSize, CardHeight - 10),
          CIN, False, 1, [], TTextAlign.Center, TTextAlign.Center);
      finally
        QRCode.Free;
      end;

    finally
      Recto.Canvas.EndScene;
    end;

    // === VERSO ===
    Verso := TBitmap.Create;
    try
      Verso.SetSize(CardWidth, CardHeight);
      Verso.Canvas.BeginScene;
      try
        Verso.Canvas.Clear(TAlphaColorRec.White);

        // Bande bleue supérieure
        Verso.Canvas.Fill.Color := TAlphaColorRec.Navy;
        Verso.Canvas.FillRect(TRectF.Create(0, 0, CardWidth, 80), 0, 0, AllCorners, 1);

        // Nom du groupe en haut
        Verso.Canvas.Font.Size := 28;
        Verso.Canvas.Fill.Color := TAlphaColorRec.White;
        Verso.Canvas.FillText(TRectF.Create(0, 20, CardWidth, 70),
          Uppercase(GroupeNom), False, 1, [], TTextAlign.Center, TTextAlign.Center);

        // Texte officiel
        Verso.Canvas.Fill.Color := TAlphaColorRec.Black;
        Verso.Canvas.Font.Size := 22;
        Verso.Canvas.FillText(TRectF.Create(60, 120, CardWidth - 60, CardHeight - 150),
          'Le porteur de cette carte est un membre officiel enregistré du ' + GroupeNom +
          '.' + sLineBreak + sLineBreak +
          'Cette carte doit être présentée à toute demande d''identification ' +
          'et reste propriété ex'+#13+'clusive du groupe.', False, 1, [],
          TTextAlign.Leading, TTextAlign.Leading);

        // Signature
        Verso.Canvas.Font.Size := 20;
        Verso.Canvas.FillText(TRectF.Create(CardWidth - 350, CardHeight - 130, CardWidth - 40, CardHeight - 60),
          'Signature : ' + GroupePresident, False, 1, [], TTextAlign.Trailing, TTextAlign.Center);

        // Cadre tampon
        Verso.Canvas.Stroke.Color := TAlphaColorRec.Black;
        Verso.Canvas.Stroke.Thickness := 2;
        Verso.Canvas.DrawRect(TRectF.Create(50, CardHeight - 130, 250, CardHeight - 50), 4, 4, AllCorners, 1);
        Verso.Canvas.Font.Size := 16;
        Verso.Canvas.FillText(TRectF.Create(50, CardHeight - 120, 250, CardHeight - 50),
          'Tampon du groupe', False, 1, [], TTextAlign.Center, TTextAlign.Center);

      finally
        Verso.Canvas.EndScene;
      end;

      // --- Enregistrer recto et verso ---
      SaveDialog := TSaveDialog.Create(nil);
      try
        SaveDialog.Title := 'Enregistrer le badge (recto et verso)';
        SaveDialog.Filter := 'Image PNG (*.png)|*.png';
        SaveDialog.DefaultExt := 'png';
        SaveDialog.FileName := Format('Badge_%s_%s_%d_RECTO.png', [UpperCase(Nom), Prenom, Matricule]);
        if SaveDialog.Execute then
        begin
          OutputFileRecto := SaveDialog.FileName;
          OutputFileVerso := ChangeFileExt(OutputFileRecto, '_VERSO.png');
          Recto.SaveToFile(OutputFileRecto);
          Verso.SaveToFile(OutputFileVerso);
//          MessageDlg('Badge recto et verso enregistrés avec succès.', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
        end;
      finally
        SaveDialog.Free;
      end;

    finally
      Verso.Free;
    end;

  finally
    Recto.Free;
  end;
end;




procedure TForm2.Button2Click(Sender: TObject);
var
  NextMatricule, CurrentMatricule: Integer;
  ImageDir, DestFile, PhotoPath: string;
  FS: TFormatSettings;
  InscriDate: TDate;
  EmailValid, CINValid, TelValid: Boolean;
  QCheck, QGroupe: TFDQuery;
  GroupeNom, GroupeAdresse, GroupePhoto: string;
begin
  ShowSplash;

  FS := TFormatSettings.Create;
  FS.DateSeparator := '-';
  FS.ShortDateFormat := 'yyyy-MM-dd';
  InscriDate := Now;

  // --- Vérifications obligatoires ---
  if Trim(Edit1.Text) = '' then
  begin
    ShowMessage('Veuillez saisir le nom du membre.');
    Edit1.SetFocus;
    Exit;
  end;

  if DateEdit1.Text = '' then
  begin
    ShowMessage('Veuillez saisir la date de naissance.');
    DateEdit1.SetFocus;
    Exit;
  end;

  if Trim(Edit8.Text) = '' then
  begin
    ShowMessage('Veuillez saisir le CIN.');
    Edit8.SetFocus;
    Exit;
  end;

  // --- Vérification CIN ---
  CINValid := (Length(Edit8.Text) = 12) and (CharInSet(Edit8.Text[6], ['1', '2']));
  if not CINValid then
  begin
    ShowMessage('Le numéro CIN est incorrect.');
    Edit8.SetFocus;
    Exit;
  end;

  // --- Vérification email ---
  EmailValid := Pos('@', Edit10.Text) > 1;
  if not EmailValid then
  begin
    ShowMessage('Adresse email invalide.');
    Edit10.SetFocus;
    Exit;
  end;

  // --- Vérification téléphone ---
  TelValid := (Length(Edit11.Text) = 10) and CharInSet(Edit11.Text[2], ['0'..'9']);
  if not TelValid then
  begin
    ShowMessage('Le téléphone est incorrect !');
    Edit11.SetFocus;
    Exit;
  end;

  // --- Récupérer infos du groupe pour affichage ---
  QGroupe := TFDQuery.Create(nil);
  try
    QGroupe.Connection := DataModule1.FDConnection1;
    QGroupe.SQL.Text := 'SELECT nomSetting,presidentSetting, adresseSetting, photoSetting FROM t_groupe LIMIT 1';
    QGroupe.Open;

    if not QGroupe.IsEmpty then
    begin
      GroupeNom := QGroupe.FieldByName('nomSetting').AsString;
      GroupeNom := QGroupe.FieldByName('presidentSetting').AsString;
      GroupeAdresse := QGroupe.FieldByName('adresseSetting').AsString;
      GroupePhoto := QGroupe.FieldByName('photoSetting').AsString;
    end;
  finally
    QGroupe.Free;
  end;

  // --- Dossier image ---
  ImageDir := TPath.Combine(ExtractFilePath(ParamStr(0)), 'imgMembre');
  if not DirectoryExists(ImageDir) then
    CreateDir(ImageDir);

  SetFileAttributes(PWideChar(ImageDir), FILE_ATTRIBUTE_HIDDEN);

  // --- Déterminer le matricule ---
  if Button2.Text = 'Enregistrer' then
  begin
    with DataModule1.FDQuery1 do
    begin
      Connection := DataModule1.FDConnection1;
      SQL.Text := 'SELECT MAX(matricule) AS MaxMat FROM t_membre';
      Open;
      try
        if Eof or FieldByName('MaxMat').IsNull then
          NextMatricule := 1
        else
          NextMatricule := FieldByName('MaxMat').AsInteger + 1;
      finally
        Close;
      end;
    end;
  end
  else
  begin
    // Modification
    CurrentMatricule := StrToInt(StringGrid1.Cells[0, StringGrid1.Row]);
    NextMatricule := CurrentMatricule;
  end;

  // --- Vérifier existence CIN ---
  QCheck := TFDQuery.Create(nil);
  try
    QCheck.Connection := DataModule1.FDConnection1;
    QCheck.SQL.Text := 'SELECT matricule FROM t_membre WHERE cin = :cin';
    QCheck.ParamByName('cin').AsString := Edit8.Text;
    QCheck.Open;

    if not QCheck.Eof then
    begin
      if (Button2.Text = 'Enregistrer') or
         ((Button2.Text = 'Modifier') and (QCheck.FieldByName('matricule').AsInteger <> NextMatricule)) then
      begin
        ShowMessage('Un membre a déjà été inscrit avec ce CIN.');
        Edit8.SetFocus;
        Exit;
      end;
    end;
  finally
    QCheck.Free;
  end;

  // --- Sauvegarde de la photo du membre ---
  if not Image1.Bitmap.IsEmpty then
  begin
    DestFile := TPath.Combine(ImageDir, Format('Photo de '+Uppercase(Edit1.Text)+' '+Edit2.Text+'_%d.png', [NextMatricule]));
    Image1.Bitmap.SaveToFile(DestFile);
  end
  else
    DestFile := '';

  PhotoPath := DestFile;

  // --- Enregistrement membre ---
  with DataModule1.FDQuery1 do
  begin
    Connection := DataModule1.FDConnection1;

    if Button2.Text = 'Enregistrer' then
    begin
      SQL.Text :=
        'INSERT INTO t_membre (matricule, nom, prenom, date_naissance, lieu_naissance, ' +
        'filiation_pere, filiation_mere, cin, sexe, adresse, email, telephone, image, date_inscription) ' +
        'VALUES (:matricule, :nom, :prenom, :date_naissance, :lieu_naissance, :filiation_pere, :filiation_mere, ' +
        ':cin, :sexe, :adresse, :email, :telephone, :image, :date_inscription)';
    end
    else
    begin
      SQL.Text :=
        'UPDATE t_membre SET ' +
        'nom = :nom, prenom = :prenom, date_naissance = :date_naissance, lieu_naissance = :lieu_naissance, ' +
        'filiation_pere = :filiation_pere, filiation_mere = :filiation_mere, cin = :cin, sexe = :sexe, ' +
        'adresse = :adresse, email = :email, telephone = :telephone, image = :image, date_inscription = :date_inscription ' +
        'WHERE matricule = :matricule';
    end;

    ParamByName('matricule').AsInteger := NextMatricule;
    ParamByName('nom').AsString := UpperCase(Edit1.Text);
    ParamByName('prenom').AsString := Edit2.Text;
    ParamByName('date_naissance').AsDate := DateEdit1.Date;
    ParamByName('lieu_naissance').AsString := UpperCase(Edit3.Text);
    ParamByName('filiation_pere').AsString := UpperCase(Edit6.Text);
    ParamByName('filiation_mere').AsString := UpperCase(Edit7.Text);
    ParamByName('cin').AsString := Edit8.Text;
    ParamByName('sexe').AsString := UpperCase(ComboBox1.Text);
    ParamByName('adresse').AsString := UpperCase(Edit9.Text);
    ParamByName('email').AsString := Edit10.Text;
    ParamByName('telephone').AsString := Edit11.Text;
    ParamByName('image').AsString := DestFile;
    ParamByName('date_inscription').AsDate := InscriDate;

    try
      ExecSQL;

      // --- Générer le badge après enregistrement ---
      CarteGenererBadgeDoubleFace(
        Edit8.Text,          // CIN
        NextMatricule,       // Matricule
        Edit1.Text,          // Nom
        Edit2.Text,          // Prénom
        ComboBox1.Text,      // Sexe
        Edit9.Text,          // Adresse
        Edit10.Text,         // Email
        PhotoPath            // Photo
      );

      ChargerStringGrid1;
      Vidage;
      MessageDlg('Membre enregistré et badge généré avec succès.',
        TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);

    except
      on E: Exception do
        MessageDlg('Erreur : ' + E.Message,
          TMsgDlgType.mtError, [TMsgDlgBtn.mbOK], 0);
    end;
  end;
end;

procedure TForm2.Button3Click(Sender: TObject);
begin
  Vidage;
  Edit1.SetFocus;
end;

procedure TForm2.Button4Click(Sender: TObject);
var
  Matricule, ImageDir, DestFile, Nom, Prenom: string;
  Row, NbPresences: Integer;
begin
  Row := StringGrid1.Row;
  if (Row < 0) or (Row >= StringGrid1.RowCount) then
  begin
    TDialogService.ShowMessage('Veuillez sélectionner un membre à supprimer.');
    Exit;
  end;

  Matricule := StringGrid1.Cells[0, Row];
  if Matricule = '' then
  begin
    TDialogService.ShowMessage('Aucun matricule sélectionné.');
    Exit;
  end;

  // --- 1) Vérifier si le membre a déjà participé à une réunion
  with DataModule1.FDQuery1 do
  begin
    Close;
    SQL.Text :=
      'SELECT COUNT(*) AS Nb ' +
      'FROM t_presence ' +
      'WHERE idMembre = (SELECT id FROM t_membre WHERE matricule = :m)';
    ParamByName('m').AsString := Matricule;
    Open;
    NbPresences := FieldByName('Nb').AsInteger;
    Close;
  end;

  if NbPresences > 0 then
  begin
    TDialogService.ShowMessage(
      'Impossible de supprimer ce membre : il a déjà participé à une réunion.'
    );
    Exit;
    Vidage;
  end;

  // --- 2) Demande de confirmation ---
  TDialogService.MessageDialog(
    'Voulez-vous vraiment supprimer le membre de matricule ' + Matricule + ' ?',
    TMsgDlgType.mtConfirmation,
    [TMsgDlgBtn.mbYes, TMsgDlgBtn.mbNo],
    TMsgDlgBtn.mbNo,
    0,
    procedure(const AResult: TModalResult)
    begin
      if AResult = mrYes then
      begin
        try
                  // --- Récupère le chemin exact depuis la base ---
          with DataModule1.FDQuery2 do
          begin
            Close;
            SQL.Text := 'SELECT image FROM t_membre WHERE matricule = :m';
            ParamByName('m').AsString := Matricule;
            Open;
          end;
          // --- Suppression en base ---
          with DataModule1.FDQuery1 do
          begin
            Close;
            SQL.Text := 'DELETE FROM t_membre WHERE matricule = :m';
            ParamByName('m').AsString := Matricule;
            ExecSQL;
          end;
          if not DataModule1.FDQuery2.FieldByName('image').IsNull then
            begin
              DestFile := DataModule1.FDQuery2.FieldByName('image').AsString;
              if TFile.Exists(DestFile) then
                TFile.Delete(DestFile);
            end;
            Close;
          // --- Rafraîchissement de l'affichage ---
          ChargerStringGrid1;
          Vidage;
//          TDialogService.ShowMessage('Membre supprimé avec succès.');
        except
          on E: Exception do
            TDialogService.ShowMessage('Erreur lors de la suppression : ' + E.Message);
        end;
      end;
    end
  );
end;


procedure TForm2.StringGrid1CellClick(const Column: TColumn; const Row: Integer);
var
  FS: TFormatSettings;
  Q: TFDQuery;
  sDateNaiss, sDateInscri, sImagePath,sexeStr: string;
begin
  if Row <= 0 then Exit; // Ignorer l'en-tête ou lignes vides

  FS := TFormatSettings.Create;
  FS.DateSeparator := '-';
  FS.ShortDateFormat := 'yyyy-MM-dd';

  Q := TFDQuery.Create(nil);
  try
    Q.Connection := DataModule1.FDConnection1;

    // Supposons que le matricule soit dans la colonne 0 ou 1 selon ton Grid
    Q.SQL.Text := 'SELECT nom, prenom, date_naissance, lieu_naissance, ' +
                  'filiation_pere, filiation_mere, cin, sexe, adresse, email, telephone, image ' +
                  'FROM t_membre WHERE matricule = :mat';
    Q.ParamByName('mat').AsString := StringGrid1.Cells[0, Row]; // adapte l'index de colonne si nécessaire
    Q.Open;

    if not Q.Eof then
    begin
      Edit1.Text := Q.FieldByName('nom').AsString;
      Edit2.Text := Q.FieldByName('prenom').AsString;

      sDateNaiss := Q.FieldByName('date_naissance').AsString;
      if sDateNaiss <> '' then
        DateEdit1.Date := StrToDate(sDateNaiss, FS)
      else
        DateEdit1.Text:='';

      sexeStr := Q.FieldByName('sexe').AsString;

      Edit3.Text := Q.FieldByName('lieu_naissance').AsString;
      Edit6.Text := Q.FieldByName('filiation_pere').AsString;
      Edit7.Text := Q.FieldByName('filiation_mere').AsString;
      Edit8.Text := Q.FieldByName('cin').AsString;
      // Cherche l'item correspondant dans le ComboBox
      ComboBox1.ItemIndex := ComboBox1.Items.IndexOf(sexeStr);
      // Si non trouvé, on peut ajouter ou mettre à -1
      if ComboBox1.ItemIndex = -1 then
        ComboBox1.ItemIndex := -1; // ou ComboBox1.Text := sexeStr si style le permet
//      ComboBox1.Text := Q.FieldByName('sexe').AsString;
      Edit9.Text := Q.FieldByName('adresse').AsString;
      Edit10.Text := Q.FieldByName('email').AsString;
      Edit11.Text := Q.FieldByName('telephone').AsString;

      sImagePath := Q.FieldByName('image').AsString;
      if FileExists(sImagePath) then
        Image1.Bitmap.LoadFromFile(sImagePath)
      else
        Image1.Bitmap := nil;
    end;

  finally
    Q.Free;
    button2.Text:='Modifier';
  end;
end;


procedure TForm2.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
  if not Assigned(Form1) then
    Form1 := TForm1.Create(Self);
  Form1.Left := Form2.Left;
  Form1.Top := Form2.Top;
  Form1.Width := Form2.Width;
  Form1.Height := Form2.Height;
  Form1.Show;
end;

procedure TForm2.ListView1ItemClick(const Sender: TObject; const AItem: TListViewItem);
var
  PhotoPath: string;
  FS: TFormatSettings;
begin
  if Assigned(AItem) then
  begin
    SelectedID := AItem.Tag;

    FS := TFormatSettings.Create;
    FS.DateSeparator := '-';
    FS.ShortDateFormat := 'yyyy-MM-dd';

    with DataModule1.FDQuery1 do
    begin
      SQL.Text := 'SELECT * FROM t_membre WHERE matricule=:m';
      ParamByName('m').AsInteger := SelectedID;
      Open;
      try
        if not Eof then
        begin
          Edit1.Text := FieldByName('nom').AsString;
          Edit2.Text := FieldByName('prenom').AsString;
          Edit3.Text := FieldByName('lieu_naissance').AsString;
          Edit6.Text := FieldByName('filiation_pere').AsString;
          Edit7.Text := FieldByName('filiation_mere').AsString;
          Edit8.Text := FieldByName('cin').AsString;
          Edit9.Text := FieldByName('adresse').AsString;
          Edit10.Text := FieldByName('email').AsString;
          Edit11.Text := FieldByName('telephone').AsString;
          ComboBox1.ItemIndex := ComboBox1.Items.IndexOf(FieldByName('sexe').AsString);

          if not FieldByName('date_naissance').IsNull then
            DateEdit1.Date := StrToDate(FieldByName('date_naissance').AsString, FS);

          PhotoPath := FieldByName('image').AsString;
          if (PhotoPath <> '') and FileExists(PhotoPath) then
            Image1.Bitmap.LoadFromFile(PhotoPath)
          else
            Image1.Bitmap.Assign(nil);
        end;
      finally
        Close;
      end;
    end;

    Button2.Text := 'Modifier';
  end;
end;

end.

